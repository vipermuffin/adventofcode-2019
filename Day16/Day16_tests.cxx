//
//  Advent of Code 2019 Tests: Day 16
//
//  https://adventofcode.com/2019
//
//  Created by vipermuffin on 12/16/2019.
//  Copyright Â© 2019 vipermuffin. All rights reserved.
//

#include "Day16.h"
#include "gtest/gtest.h"
#include <iostream>
#include <string>

namespace AocDay16{
    extern std::string solvea();
    extern std::string solveb();
}

using namespace std;
using namespace AocDay16;

TEST(Y2019_SolveDay16, FinalSolutionPartA) {
    EXPECT_EQ("36627552", solvea());
}

TEST(Y2019_SolveDay16, FinalSolutionPartB) {
    EXPECT_EQ("79723033", solveb());
}

TEST(Y2019_Day16Example,Test0a) {
    auto x = performFFT("12345678", 1);
    EXPECT_EQ("48226158",x);
}

TEST(Y2019_Day16Example,Test0b) {
    auto x = performFFT("12345678", 4);
    EXPECT_EQ("01029498",x);
//    cout << endl << performFFT("12345678", 100) << endl;
//    cout << performFFT("1234567812345678", 1) << " " << performFFT("12345678", 1, 100) <<endl;
//    cout << performFFT("123456781234567812345678", 100) << " " << performFFT("12345678", 100, 3) << endl;
//    cout << performFFT("12345678123456781234567812345678", 100) << " " << performFFT("12345678", 100, 4) << endl;
//    cout << performFFT("1234567812345678123456781234567812345678", 100) << " " << performFFT("12345678", 100, 5) << endl;
//    cout << performFFT("123456781234567812345678123456781234567812345678", 100) << " " << performFFT("12345678", 100, 6) << endl;
//    cout << performFFT("12345678123456781234567812345678123456781234567812345678", 100) << " " << performFFT("12345678", 100, 7) << endl;
}

TEST(Y2019_Day16Example,Test0c) {
    auto x = performFFT2("12345678", 1, 100, 0);
    auto y = performFFT("12345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678", 1);
    string s(x.begin(),x.begin()+8);
    EXPECT_EQ("00400160",s);
    EXPECT_EQ(y,x);
}

TEST(Y2019_Day16Example,Test0cc) {
    constexpr int offset = 10;
    auto x = performFFT2("12345678", 1, 100, offset);
    auto y = performFFT("12345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678", 1);
    string s(x.begin(),x.begin()+8);
    string s1(y.begin()+offset,y.begin()+offset+8);
    EXPECT_EQ(s1,s);
    EXPECT_EQ(string(y.begin()+offset,y.end()),x);
}

TEST(Y2019_Day16Example,Test0ccc) {
    int offset = 0;
    auto x = performFFT2("12345678", 2, 100, offset);
    auto y = performFFT("12345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678", 2);
    string s(x.begin(),x.begin()+8);
    string s1(y.begin()+offset,y.begin()+offset+8);

    EXPECT_EQ(s1,s);
}

TEST(Y2019_Day16Example,Test0d) {
    auto x = performFFT2("03036732577212944063491565474664", 100, 10000,303673);
    string s(x.begin(),x.begin()+8);
    EXPECT_EQ("84462026",s);
}

TEST(Y2019_Day16Example,Test0e) {
    auto x = performFFT2("02935109699940807407585447034323", 100, 10000,293510);
    string s(x.begin(),x.begin()+8);
    EXPECT_EQ("78725270",s);
}

TEST(Y2019_Day16Example,Test0f) {
    auto x = performFFT2("03081770884921959731165446850517", 100, 10000,308177);
    string s(x.begin(),x.begin()+8);
    EXPECT_EQ("53553731",s);
}

TEST(Y2019_Day16Example,Test1) {
    auto x = performFFT("80871224585914546619083218645595", 100);
    string s(x.begin(),x.begin()+8);
    EXPECT_EQ("24176176",s);
}

TEST(Y2019_Day16Example,Test2) {
    auto x = performFFT("19617804207202209144916044189917", 100);
    string s(x.begin(),x.begin()+8);
    EXPECT_EQ("73745418",s);
}

TEST(Y2019_Day16Example,Test3) {
    auto x = performFFT("69317163492948606335995924319873", 100);
    string s(x.begin(),x.begin()+8);
    EXPECT_EQ("52432133",s);
}

//TEST(Y2019_Day16Example,Test4) {
//    auto x = performFFT("03036732577212944063491565474664", 100, 10000);
//    auto s = string(x.begin(),x.begin()+7);
//    auto z = stoi(s);
//    s = string(x.begin()+z,x.begin()+z+8);
//    EXPECT_EQ("84462026",s);
//}

TEST(Y2019_Day16Example,Test5) {
    auto x = performFFT("12345678", 4);
    EXPECT_EQ("01029498",x);
}
